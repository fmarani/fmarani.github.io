<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency Injection on Blog | Federico Marani</title>
    <link>/tags/dependency-injection/</link>
    <description>Recent content in Dependency Injection on Blog | Federico Marani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 05 Oct 2010 20:32:05 +0000</lastBuildDate>
    
	<atom:link href="/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making complex software not complicated</title>
      <link>/blog/making-complex-software-not-complicated/</link>
      <pubDate>Tue, 05 Oct 2010 20:32:05 +0000</pubDate>
      
      <guid>/blog/making-complex-software-not-complicated/</guid>
      <description>I&amp;rsquo;d like to share my thoughts with you about approaching difficult problems in software development. This is pretty much what i came to realize after many years of development.
A difficult problem is usually divisible in several simple problems, but when developing software you stack up problems and every problem relies on the solution of the sub-problem.
Example (a common order visualizer)
 1st level of the stack: 1) display_order_in_xml() (relies on read_order()) 1) display_order_in_json() (relies on read_order()) 2nd: 2) read_order() (relies on read_orderitems() and an internal calculate_delivery()) 3rd: 3) read_orderitems() (relies on items_mapper::find() OR read_items_from_external_shop()) 4th - case 1 - items_mapper 4) items_mapper::find() (relies on a db_Adapter) 5) db_Adapter (no dependencies) 4th - case 2 - read_items_from_external_shop() 4) read_items_from_external_shop() (relies on json_call()) 5) json_call() (depends on http class for sending requests) 6) http class (no dependencies)  Solution here is to isolate each bit, and being able to feed a fixed solution of the sub-problem to the current problem.</description>
    </item>
    
  </channel>
</rss>