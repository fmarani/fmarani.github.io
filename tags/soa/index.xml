<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>soa on Blog | Federico Marani</title>
    <link>/tags/soa/</link>
    <description>Recent content in soa on Blog | Federico Marani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 24 Sep 2016 23:16:56 +0200</lastBuildDate>
    
	<atom:link href="/tags/soa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Python microservice stack</title>
      <link>/blog/a-python-microservice-stack/</link>
      <pubDate>Sat, 24 Sep 2016 23:16:56 +0200</pubDate>
      
      <guid>/blog/a-python-microservice-stack/</guid>
      <description>First of all, let me say the word &amp;ldquo;microservice&amp;rdquo; is incredibly inflated these days, but some of the original reasons to use them still hold true. Part of its definition comes from SOA, with some added considerations:
 Services roughly map to business functions Services are autonomous (shared nothing architecture) Boundaries are explicit Services declare schemas and interfaces Company policy defines version compatibility Services are deployed separately Services are manageable by different teams Service unavailability is handled gracefully Service call stack is broad rather than deep  Recently I worked with a company that needed to scale product/engineering to 50+ people, which makes the investment towards this methodology justifiable.</description>
    </item>
    
    <item>
      <title>Why SOA in a startup sucks</title>
      <link>/blog/why-soa-in-a-startup-sucks/</link>
      <pubDate>Sun, 22 Jan 2012 21:49:33 +0000</pubDate>
      
      <guid>/blog/why-soa-in-a-startup-sucks/</guid>
      <description>Service Oriented Architectures as i intend are architectures where each component is deployable and usable separately from others. Take as example Amazon, much of their software stack is offered as a service, mainly through an HTTP interface, and marketed as SaaS.
There are tons of reasons why you would want to think to your system as a series of components deployable separately&amp;hellip; flexibility, being able to choose the right tools for each component, etc.</description>
    </item>
    
  </channel>
</rss>