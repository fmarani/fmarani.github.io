<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Blog | Federico Marani</title>
    <link>/tags/development/</link>
    <description>Recent content in Development on Blog | Federico Marani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Thu, 03 Nov 2011 14:49:36 +0000</lastBuildDate>
    <atom:link href="/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Passion and Pragmatism in IT</title>
      <link>/blog/passion-and-pragmatism-in-it/</link>
      <pubDate>Thu, 03 Nov 2011 14:49:36 +0000</pubDate>
      
      <guid>/blog/passion-and-pragmatism-in-it/</guid>
      <description>&lt;p&gt;Do what you love is what, for instance, Steve Jobs said. It does not get more true than that. Hacking has been labeled as a negative word, but for me has a positive meaning, which is the impulse of people to open things, learn how they work and change it to make it better. Hacking for me is a passion, something I always do with pleasure.&lt;/p&gt;

&lt;p&gt;Having this attitude in IT is important, only experimenting with stuff pushes your skills forward. Courses are not what gives you the ability to do things, they are just a kickstart for your hacking. Learning is one of the things i believe i am good at, it is something i find myself doing without realizing it.&lt;/p&gt;

&lt;p&gt;But to work in IT, hacking by itself is not a great quality if you are not able to control where it is going. Attainment is important, because it is the manifestation of your knowledge. If you are not able to make things concrete, how can someone know if you are good at what you do?&lt;/p&gt;

&lt;p&gt;Pragmatism is when you learn what in practice is needed and you do it. In practice, a product that comes from only passion is a nice thing to have but does not directly satisfy a need. In constrast, if you direct your hacking towards satistying a need, then it becomes a killer feature.&lt;/p&gt;

&lt;p&gt;Needs are always specified in time. Today i know i will need to eat, if i skip today and eat tomorrow i will survive but i will be pretty upset. People work to satisfy needs, not because they are passionate about it (although i hope they like it), so if they ask you something for work, your passion must be directed towards their need. That&amp;rsquo;s the only way you will get money and success in the long-term. Money satisfies your needs, success is the intellectual reward for your passion. Both important.&lt;/p&gt;

&lt;p&gt;Unfortunately work is not always fertile ground for exploration, at least not forever. In the end, if hacking for you is important, switch job to keep things moving. I know it can be daunting for someone, but sometimes you just have to take a leap of faith.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Programming ideas in OOP</title>
      <link>/blog/functional-programming-ideas-in-oop/</link>
      <pubDate>Sun, 27 Mar 2011 13:29:33 +0000</pubDate>
      
      <guid>/blog/functional-programming-ideas-in-oop/</guid>
      <description>&lt;p&gt;About a year and half ago I started to be interested in Scala. Scala is a hybrid between an Object Oriented language and a Functional Language, and while i was using it i learnt to appreciate more and more the Functional part. I will not hide that the most difficult part in learning Scala was because of that.&lt;/p&gt;

&lt;p&gt;The mindset when solving problems using FP is different because it forces you to think in terms of mapping transformations rather than step-by-step algorithms. Type systems are also very strong, more than the OOP i know.&lt;/p&gt;

&lt;p&gt;Without getting the rant go too far, I found that my OOP style is now really influenced by the functional thinking:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lots of small functions, generally short, with strict behaviour.&lt;/li&gt;
&lt;li&gt;functional style is usually more testable because by definition there is no side effect in the code. The code does only one thing and function application to a state A always returns state B. This links to &lt;a href=&#34;http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29&#34;&gt;Referential Transparency&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;state is partly responsible for exponential increase of complexity when stacking up code. Inheritance, composition, whatever technique you use. An object variable that changes state inside a nested object is usually quite difficult to follow. I am not going to say all variables need to be read-only, but limiting the scope in which variables are written and overwritten is good.&lt;/li&gt;
&lt;li&gt;if you can choose between stateless and stateful implementations and you are working on the business domain but still do not know it well, go stateless. Stateless implementations are easier to change.&lt;/li&gt;
&lt;li&gt;type systems initially are a pain, but they enforce you to write safe code and ultimately produce better code. Generally i found that there are not many cases in which you want automatic casting to happen. It also clashes with the rule &amp;ldquo;fail fast&amp;rdquo;, which is really high in my priorities. Type inference at pre-run time is generally what you want, not changing types.&lt;/li&gt;
&lt;li&gt;i found FP use of types leads to more specific code. For instance, I would rather use a &amp;ldquo;Currency&amp;rdquo; type than a float type. Being specific is good, less space for doubt. This is not an unquestionable rule, if performance is crucial and compiler does not optimize this code, that is a big mistake..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am sure there is a lot more about FP, but this is it for now. These are personal opinions, i am not a language theorist. I am interested in practical consequences, and this is what is happening to my way of working.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>