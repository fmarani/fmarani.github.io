<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Blog | Federico Marani</title>
    <link>/tags/python/</link>
    <description>Recent content in python on Blog | Federico Marani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 16 Jan 2018 15:41:15 +0000</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using GRPC with Django</title>
      <link>/blog/using-grpc-with-django/</link>
      <pubDate>Tue, 16 Jan 2018 15:41:15 +0000</pubDate>
      
      <guid>/blog/using-grpc-with-django/</guid>
      <description>GRPC is an implementation of an RPC system, created by Google and Square, that leverages the low-level features of HTTP/2. It has many interesting properties, like bi-directionality, efficiency, and support from many languages. RPC interfaces are declared in a special &amp;ldquo;proto&amp;rdquo; file in a readable way, which makes it, in part, self-documenting. These proto files are then used to generate client and server stubs, which is very convenient.
GRPC is a good choice for internal and performance-sensitive APIs.</description>
    </item>
    
    <item>
      <title>A Python microservice stack</title>
      <link>/blog/a-python-microservice-stack/</link>
      <pubDate>Sat, 24 Sep 2016 23:16:56 +0200</pubDate>
      
      <guid>/blog/a-python-microservice-stack/</guid>
      <description>First of all, let me say the word &amp;ldquo;microservice&amp;rdquo; is incredibly inflated these days, but some of the original reasons to use them still hold true. Part of its definition comes from SOA, with some added considerations:
 Services roughly map to business functions Services are autonomous (shared nothing architecture) Boundaries are explicit Services declare schemas and interfaces Company policy defines version compatibility Services are deployed separately Services are manageable by different teams Service unavailability is handled gracefully Service call stack is broad rather than deep  Recently I worked with a company that needed to scale product/engineering to 50+ people, which makes the investment towards this methodology justifiable.</description>
    </item>
    
    <item>
      <title>Spatial search on multiple points in Solr</title>
      <link>/blog/spatial-search-on-multiple-points-in-solr/</link>
      <pubDate>Wed, 31 Jul 2013 12:09:43 +0000</pubDate>
      
      <guid>/blog/spatial-search-on-multiple-points-in-solr/</guid>
      <description>At TrialReach we deal with clinical trials data, which contain a lot of spatial information. Tipically, clinical trials treat a certain set of conditions and they happen in various locations globally. If you are a patient then searching across clinical trials becomes really spatial sensitive: you are only interested in the closest location to you.
This case might apply to other events as well, but the key point is global distribution.</description>
    </item>
    
    <item>
      <title>Text classification in Python</title>
      <link>/blog/text-classification-in-python/</link>
      <pubDate>Wed, 21 Mar 2012 22:44:23 +0000</pubDate>
      
      <guid>/blog/text-classification-in-python/</guid>
      <description>Python and NLTK form quite a good platform to do text analysis. There is a lot of information on Internet, nevertheless i have not found a clean and simple example of a classifier. Text classifiers come from techniques such as Natural Language Processing and Machine Learning, in fact i think they are exactly in the middle of these.
Bearing in mind that building a good classifier is only possible when you have a training set that represents reality quite well, and certainly longer than the one in this example, here a first stab at it:</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/blog/logging/</link>
      <pubDate>Fri, 08 Apr 2011 01:00:10 +0000</pubDate>
      
      <guid>/blog/logging/</guid>
      <description>I work on e-commerce platforms, logging is a critical component in this area. Learn how to do it correctly will allow you and everybody else to save time when problems happen. Sometimes it is not just about saving time, but also being able to give correct answers to customers when things go wrong. When interacting with third parties, logging is even more important, because it allows you to understand where the problem lies, in your code or in the external service.</description>
    </item>
    
  </channel>
</rss>